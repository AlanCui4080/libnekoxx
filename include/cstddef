/*
 *	libnekoxx
 *	By MIT License.
 *	Copyright (c) 2023 AlanCui4080.
 */
#ifndef __NEKOXX_CSTDDEF_INC__
#define __NEKOXX_CSTDDEF_INC__

#include <cstdint>

namespace std
{
	using size_t = uintmax_t;
	using ptrdiff_t = signed long long;
	using nullptr_t = decltype(nullptr);
	using max_allgn_t = long double;

	enum class byte : unsigned char{};

	template<class IntType>
	constexpr byte& operator<<=(byte& b, IntType shift) noexcept;
	template<class IntType>
	constexpr byte operator<<(byte b, IntType shift) noexcept;
	template<class IntType>
    constexpr byte& operator>>=(byte& b, IntType shift) noexcept;
	template<class IntType>
    constexpr byte operator>>(byte b, IntType shift) noexcept;
	constexpr byte& operator|=(byte& l, byte r) noexcept;
	constexpr byte operator|(byte l, byte r) noexcept;
	constexpr byte& operator&=(byte& l, byte r) noexcept;
	constexpr byte operator&(byte l, byte r) noexcept;
	constexpr byte& operator^=(byte& l, byte r) noexcept;
	constexpr byte operator^(byte l, byte r) noexcept;
	constexpr byte operator~(byte b) noexcept;
	template<class IntType>
    constexpr IntType to_integer(byte b) noexcept;
}

#endif //__NEKOXX_CSTDDEF_INC__
