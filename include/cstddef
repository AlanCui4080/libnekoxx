/*
 *	libnekoxx
 *	By MIT License.
 *	Copyright (c) 2023 AlanCui4080 and Ziyao.
 */
#ifndef __NEKOXX_CSTDDEF_INC__
#define __NEKOXX_CSTDDEF_INC__

#include <stddef.h>

#include <cstdint>

namespace std
{
	using size_t = ::size_t;
	using ptrdiff_t = ::ptrdiff_t;
	using nullptr_t = decltype(nullptr);
	using max_align_t = ::max_align_t;

	enum class byte : unsigned char {};

	template <class IntType>
	constexpr byte &operator<<=(byte &b, IntType shift) noexcept;
	template <class IntType>
	constexpr byte operator<<(byte b, IntType shift) noexcept;
	template <class IntType>
	constexpr byte &operator>>=(byte &b, IntType shift) noexcept;
	template <class IntType>
	constexpr byte operator>>(byte b, IntType shift) noexcept;
	constexpr byte &operator|=(byte &l, byte r) noexcept;
	constexpr byte operator|(byte l, byte r) noexcept;
	constexpr byte &operator&=(byte &l, byte r) noexcept;
	constexpr byte operator&(byte l, byte r) noexcept;
	constexpr byte &operator^=(byte &l, byte r) noexcept;
	constexpr byte operator^(byte l, byte r) noexcept;
	constexpr byte operator~(byte b) noexcept;
	template <class IntType> constexpr IntType to_integer(byte b) noexcept;
} // namespace std

#endif // __NEKOXX_CSTDDEF_INC__
